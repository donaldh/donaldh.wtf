---
title: "Roman Numerals in Perl 6"
date: 2019-05-29T10:23:44+01:00
tags:
  - perl6
  - raku
categories:
  - code
comments: true
---

My first shot at the [[https://perlweeklychallenge.org/][Perl Weekly Challenge]] with a Roman numeral encoder in Perl 6.

<!--more-->

I have been watching the [[https://perlweeklychallenge.org/][Perl Weekly Challenge]] with interest since it was first announced, but
without the time to actually participate. [[https://perlweeklychallenge.org/blog/perl-weekly-challenge-010/][This week]] there are three challenges, the first of
which is to write an encoder for Roman numerals:

#+BEGIN_QUOTE
Write a script to encode/decode Roman numerals. For example, given Roman numeral CCXLVI, it
should return 246. Similarly, for decimal number 39, it should return XXXIX. Checkout wikipedia
page for more informaiton.
#+END_QUOTE

*** Roman to Decimal

A Roman numeral can be decoded by splitting it into symbols, converting each to a decimal then
adding the decimals to give a result. 'One-before' numerals such as ~IX~ can be handled as a single symbol,
giving this list of symbols:

#+BEGIN_SRC perl6
  my %r2i =
  'I' => 1, 'IV' => 4, 'V' => 5, 'IX' => 9,
  'X' => 10, 'XL' => 40, 'L' => 50, 'XC' => 90,
  'C' => 100, 'D' => 500, 'CM' => 900, 'M' => 1000;
#+END_SRC

The decode algorithm can be implemented by matching all the symbols, taking a slice of the conversion
map and then reducing the slice to its sum.

#+BEGIN_SRC perl6
  say [+] %r2i{ $roman.match(/ ( <{%r2i.keys}> )* /).flat>>.Str }
#+END_SRC

#+BEGIN_SRC sh
  ./roman.pl6 decode CCXLVI
  246
#+END_SRC

That works fine but is surprisingly slow, more so for long numerals. Instead of using a regex
match, we can use split and keep the delimiter values with ~:v~ – though we do need to filter out
all the zero length strings between the delimiters.

#+BEGIN_SRC perl6
  say [+] %r2i{ $roman.split(%r2i.keys, :v).grep(*.Bool) }
#+END_SRC

[[https://tio.run/##Nc6xCsIwFIXh3ae4i7TVEFKxgkodjEuhWUtAHByKFCMNiQpFfPaYm8Tty7n/EN0btXGPCeZmNUA9A8iaDOoDlMSrC1x7RlU4ysAtwTa6ZH6XbYzRkVWYecxZ6Hnq8XJKEZqLVOFD/CO2d/Y6wXl5Cd/7gFUvo6nVanjmuNB7P1kCu3dBb6bX@YIex1EV8HVOcNFKKZvuBw][Try it Online!]]

~Str.split~ uses the longest delimiter matches, filtering out the matches that are wholly contained
within a longer match – though this does not appear to be documented in the [[https://docs.perl6.org/routine/split][split documentation]].

It would be nice if there was a version of ~Str.match~ that took a list of literal strings to match.

*** Decimal to Roman

The encode algorithm can be implemented by using integer arithmetic to find how many of each
symbol is required, starting with the numerically largest symbol ~M~ and then concatenating the
symbols together.

#+BEGIN_SRC perl6
  say [~] gather {
      for %i2r.keys.sort: -* -> $radix {
          take %i2r{$radix} x $number / $radix;
          $number %= $radix;
      }
  }
#+END_SRC

#+BEGIN_SRC sh
  ./roman.pl6 encode 39
  XXXIX
#+END_SRC

[[https://tio.run/##VY7PC4IwFIDv/hXvoAilpmGRiV3sEtQ1guiwaNXol2wKiti/bnvbCtrp2/s@9lZQfp/2jwYcPmaQWQDuyoVsAZEnaaswlqhpgsOdwsTDVnMUyvlurWNkjRM1znUeqj43PZqliZDzjanwsvlGYWrhz9iYQ6Y@GJBnyQrCuFDGflaPI0U5FPeKF2kvSAP79wEupLxK0cqdAOcXV48EN9qIQLx4OQd/AP4CbE5OrDYZnpLcqGpbrTqof1tGJk9/9dc42Z/qrK7vo2QWfwA][Try it Online!]]

It's kinda nice using ~gather / take~ here but I'd prefer a functional solution over this
explicit iterative solution. Enough time spent already so that will be for another day.

*** The Resulting Program

#+BEGIN_SRC perl6
  #!/usr/bin/env perl6

  use v6;

  my %r2i =
  'I' => 1, 'IV' => 4, 'V' => 5, 'IX' => 9,
  'X' => 10, 'XL' => 40, 'L' => 50, 'XC' => 90,
  'C' => 100, 'D' => 500, 'CM' => 900, 'M' => 1000;

  multi MAIN('decode', Str $roman) {
      say [+] %r2i{ $roman.split(%r2i.keys, :v).grep(*.Bool) }
  }

  my %i2r = %r2i.antipairs;

  multi MAIN('encode', Int $number is copy where 0 <= $number <= 3999) {
      say [~] gather {
          for %i2r.keys.sort: -* -> $radix {
              take %i2r{$radix} x $number / $radix;
              $number %= $radix;
          }
      }
  }
#+END_SRC

#+BEGIN_SRC sh
  ./roman.pl6 decode MMXIX
  2019

  ./roman.pl6 decode MCMLXXXIV
  1984

  ./roman.pl6 encode 2019
  MMXIX

  ./roman.pl6 encode 1984
  MCMLXXXIV
#+END_SRC
